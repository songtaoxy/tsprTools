<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (15,245 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>com/st/api/practice/profile/TestProfile.main (13,998 samples, 91.82%)</title><rect x="10.0" y="963.0" width="1083.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/st/api/practice/profile/TestProfile.main</text>
</g>
<g>
<title>com/st/api/practice/profile/TestProfile.produceString (13,998 samples, 91.82%)</title><rect x="10.0" y="947.0" width="1083.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/st/api/practice/profile/TestProfile.produceString</text>
</g>
<g>
<title>java/io/PrintStream.println (13,913 samples, 91.26%)</title><rect x="16.6" y="931.0" width="1076.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.6" y="942.0">java/io/PrintStream.println</text>
</g>
<g>
<title>java/io/PrintStream.newLine (6,826 samples, 44.78%)</title><rect x="25.0" y="915.0" width="528.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="926.0">java/io/PrintStream.newLine</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (172 samples, 1.13%)</title><rect x="32.8" y="899.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="35.8" y="910.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (13 samples, 0.09%)</title><rect x="34.5" y="883.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="37.5" y="894.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (4 samples, 0.03%)</title><rect x="35.5" y="883.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="38.5" y="894.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (15 samples, 0.10%)</title><rect x="35.8" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="38.8" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (36 samples, 0.24%)</title><rect x="36.9" y="883.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="39.9" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (34 samples, 0.22%)</title><rect x="39.7" y="883.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="42.7" y="894.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (15 samples, 0.10%)</title><rect x="40.7" y="867.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="43.7" y="878.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (6 samples, 0.04%)</title><rect x="41.9" y="867.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="44.9" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (23 samples, 0.15%)</title><rect x="42.4" y="883.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="45.4" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (7 samples, 0.05%)</title><rect x="43.6" y="867.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="46.6" y="878.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (23 samples, 0.15%)</title><rect x="44.1" y="883.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="47.1" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans(JavaThreadState, JavaThreadState) (21 samples, 0.14%)</title><rect x="44.3" y="867.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="47.3" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*) (65 samples, 0.43%)</title><rect x="46.1" y="899.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="49.1" y="910.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (7 samples, 0.05%)</title><rect x="46.9" y="883.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="49.9" y="894.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (10 samples, 0.07%)</title><rect x="47.5" y="883.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="50.5" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (13 samples, 0.09%)</title><rect x="48.2" y="883.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="51.2" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (14 samples, 0.09%)</title><rect x="49.2" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="52.2" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (11 samples, 0.07%)</title><rect x="49.5" y="867.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="52.5" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (4 samples, 0.03%)</title><rect x="50.3" y="883.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="53.3" y="894.0"></text>
</g>
<g>
<title>internal_catch_exc_subsystem (4 samples, 0.03%)</title><rect x="50.9" y="883.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="53.9" y="894.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (4 samples, 0.03%)</title><rect x="51.2" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="54.2" y="910.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (40 samples, 0.26%)</title><rect x="51.6" y="899.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.6" y="910.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.flushBuffer (216 samples, 1.42%)</title><rect x="54.7" y="899.0" width="16.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.7" y="910.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (136 samples, 0.89%)</title><rect x="60.9" y="883.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.9" y="894.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (125 samples, 0.82%)</title><rect x="61.7" y="867.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (82 samples, 0.54%)</title><rect x="65.0" y="851.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.0" y="862.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (9 samples, 0.06%)</title><rect x="65.3" y="835.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.3" y="846.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (69 samples, 0.45%)</title><rect x="66.0" y="835.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.0" y="846.0"></text>
</g>
<g>
<title>java/nio/charset/CoderResult.isOverflow (8 samples, 0.05%)</title><rect x="66.4" y="819.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (4 samples, 0.03%)</title><rect x="66.7" y="803.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.7" y="814.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (56 samples, 0.37%)</title><rect x="67.0" y="819.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.0" y="830.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (47 samples, 0.31%)</title><rect x="67.7" y="803.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="70.7" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.03%)</title><rect x="69.2" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.2" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.array (10 samples, 0.07%)</title><rect x="69.5" y="787.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.5" y="798.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.access$200 (9 samples, 0.06%)</title><rect x="70.7" y="787.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.7" y="798.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.updatePositions (9 samples, 0.06%)</title><rect x="70.7" y="771.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.7" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (8 samples, 0.05%)</title><rect x="70.8" y="755.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.8" y="766.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.newLine (133 samples, 0.87%)</title><rect x="71.4" y="899.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.4" y="910.0"></text>
</g>
<g>
<title>java/io/Writer.write (133 samples, 0.87%)</title><rect x="71.4" y="883.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.4" y="894.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.write (130 samples, 0.85%)</title><rect x="71.4" y="867.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.4" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (36 samples, 0.24%)</title><rect x="76.6" y="851.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="79.6" y="862.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (29 samples, 0.19%)</title><rect x="77.2" y="835.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="80.2" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans(JavaThreadState, JavaThreadState) (14 samples, 0.09%)</title><rect x="78.3" y="819.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="81.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.getChars (5 samples, 0.03%)</title><rect x="79.7" y="851.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.7" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (18 samples, 0.12%)</title><rect x="80.0" y="851.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="83.0" y="862.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (6,093 samples, 39.97%)</title><rect x="81.7" y="899.0" width="471.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.7" y="910.0">java/io/OutputStreamWriter.flushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (6,080 samples, 39.88%)</title><rect x="82.7" y="883.0" width="470.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.7" y="894.0">sun/nio/cs/StreamEncoder.flushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (6,007 samples, 39.40%)</title><rect x="88.0" y="867.0" width="465.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="91.0" y="878.0">sun/nio/cs/StreamEncoder.implFlushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (6,006 samples, 39.40%)</title><rect x="88.1" y="851.0" width="464.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.1" y="862.0">sun/nio/cs/StreamEncoder.writeBytes</text>
</g>
<g>
<title>java/io/PrintStream.write (5,949 samples, 39.02%)</title><rect x="88.6" y="835.0" width="460.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="91.6" y="846.0">java/io/PrintStream.write</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (9 samples, 0.06%)</title><rect x="92.4" y="819.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="95.4" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (212 samples, 1.39%)</title><rect x="93.5" y="819.0" width="16.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="96.5" y="830.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (11 samples, 0.07%)</title><rect x="94.7" y="803.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="97.7" y="814.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (8 samples, 0.05%)</title><rect x="95.5" y="803.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="98.5" y="814.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.03%)</title><rect x="96.1" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="99.1" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (47 samples, 0.31%)</title><rect x="96.5" y="803.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="99.5" y="814.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (43 samples, 0.28%)</title><rect x="100.1" y="803.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="103.1" y="814.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (26 samples, 0.17%)</title><rect x="101.3" y="787.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="104.3" y="798.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (4 samples, 0.03%)</title><rect x="103.0" y="771.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="106.0" y="782.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (22 samples, 0.14%)</title><rect x="103.4" y="803.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="106.4" y="814.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (6 samples, 0.04%)</title><rect x="104.7" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="107.7" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (60 samples, 0.39%)</title><rect x="105.1" y="803.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="108.1" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans(JavaThreadState, JavaThreadState) (40 samples, 0.26%)</title><rect x="106.7" y="787.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="109.7" y="798.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (5,519 samples, 36.20%)</title><rect x="110.3" y="819.0" width="427.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.3" y="830.0">java/io/BufferedOutputStream.flush</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (5,425 samples, 35.59%)</title><rect x="117.6" y="803.0" width="419.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.6" y="814.0">java/io/BufferedOutputStream.flushBuffer</text>
</g>
<g>
<title>java/io/FileOutputStream.write (5,406 samples, 35.46%)</title><rect x="118.7" y="787.0" width="418.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.7" y="798.0">java/io/FileOutputStream.write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (5,402 samples, 35.43%)</title><rect x="119.0" y="771.0" width="418.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.0" y="782.0">java/io/FileOutputStream.writeBytes</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (5,215 samples, 34.21%)</title><rect x="133.4" y="755.0" width="403.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="136.4" y="766.0">Java_java_io_FileOutputStream_writeBytes</text>
</g>
<g>
<title>jni_ExceptionOccurred (7 samples, 0.05%)</title><rect x="135.0" y="739.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="138.0" y="750.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.03%)</title><rect x="135.7" y="739.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="138.7" y="750.0"></text>
</g>
<g>
<title>jni_GetObjectField (9 samples, 0.06%)</title><rect x="136.1" y="739.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="139.1" y="750.0"></text>
</g>
<g>
<title>writeBytes (5,171 samples, 33.92%)</title><rect x="136.8" y="739.0" width="400.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="139.8" y="750.0">writeBytes</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.03%)</title><rect x="145.1" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="148.1" y="734.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (5 samples, 0.03%)</title><rect x="145.5" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="148.5" y="734.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (4 samples, 0.03%)</title><rect x="145.9" y="723.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="148.9" y="734.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (10 samples, 0.07%)</title><rect x="146.4" y="723.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="149.4" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.05%)</title><rect x="147.2" y="723.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="150.2" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.03%)</title><rect x="147.8" y="723.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="150.8" y="734.0"></text>
</g>
<g>
<title>handleWrite (58 samples, 0.38%)</title><rect x="148.5" y="723.0" width="4.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="151.5" y="734.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (105 samples, 0.69%)</title><rect x="153.0" y="723.0" width="8.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="156.0" y="734.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.03%)</title><rect x="153.7" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="156.7" y="718.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (10 samples, 0.07%)</title><rect x="154.2" y="707.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="157.2" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (38 samples, 0.25%)</title><rect x="155.2" y="707.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="158.2" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (38 samples, 0.25%)</title><rect x="158.1" y="707.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="161.1" y="718.0"></text>
</g>
<g>
<title>jni_GetArrayLength (145 samples, 0.95%)</title><rect x="161.1" y="723.0" width="11.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="164.1" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (62 samples, 0.41%)</title><rect x="163.6" y="707.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="166.6" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (50 samples, 0.33%)</title><rect x="168.4" y="707.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="171.4" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (163 samples, 1.07%)</title><rect x="172.3" y="723.0" width="12.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="175.3" y="734.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 0.04%)</title><rect x="176.1" y="707.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="179.1" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (52 samples, 0.34%)</title><rect x="176.8" y="707.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="179.8" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (44 samples, 0.29%)</title><rect x="180.8" y="707.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="183.8" y="718.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (9 samples, 0.06%)</title><rect x="184.2" y="707.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="187.2" y="718.0"></text>
</g>
<g>
<title>jni_GetObjectField (360 samples, 2.36%)</title><rect x="184.9" y="723.0" width="27.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="187.9" y="734.0">j..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (18 samples, 0.12%)</title><rect x="188.9" y="707.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="191.9" y="718.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (32 samples, 0.21%)</title><rect x="190.3" y="707.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="193.3" y="718.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (14 samples, 0.09%)</title><rect x="192.7" y="707.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="195.7" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (11 samples, 0.07%)</title><rect x="193.8" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="196.8" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (110 samples, 0.72%)</title><rect x="194.7" y="707.0" width="8.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="197.7" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (124 samples, 0.81%)</title><rect x="203.2" y="707.0" width="9.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="206.2" y="718.0"></text>
</g>
<g>
<title>write (4,187 samples, 27.46%)</title><rect x="212.9" y="723.0" width="324.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="215.9" y="734.0">write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (5 samples, 0.03%)</title><rect x="537.1" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="540.1" y="798.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (150 samples, 0.98%)</title><rect x="537.5" y="819.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="540.5" y="830.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (7 samples, 0.05%)</title><rect x="542.1" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="545.1" y="814.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (4 samples, 0.03%)</title><rect x="542.6" y="803.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="545.6" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*) (56 samples, 0.37%)</title><rect x="543.1" y="803.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="546.1" y="814.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (8 samples, 0.05%)</title><rect x="543.8" y="787.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="546.8" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (12 samples, 0.08%)</title><rect x="544.7" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="547.7" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (15 samples, 0.10%)</title><rect x="545.6" y="787.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="548.6" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (12 samples, 0.08%)</title><rect x="545.9" y="771.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="548.9" y="782.0"></text>
</g>
<g>
<title>internal_catch_exc_subsystem (6 samples, 0.04%)</title><rect x="547.0" y="787.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="550.0" y="798.0"></text>
</g>
<g>
<title>internal_catch_exc_subsystem (9 samples, 0.06%)</title><rect x="547.6" y="803.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="550.6" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (10 samples, 0.07%)</title><rect x="548.3" y="803.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="551.3" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.clear (49 samples, 0.32%)</title><rect x="549.1" y="835.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="552.1" y="846.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.isOpen (4 samples, 0.03%)</title><rect x="553.0" y="867.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="556.0" y="878.0"></text>
</g>
<g>
<title>java/io/PrintStream.print (6,971 samples, 45.73%)</title><rect x="553.4" y="915.0" width="539.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="556.4" y="926.0">java/io/PrintStream.print</text>
</g>
<g>
<title>java/io/PrintStream.write (6,789 samples, 44.53%)</title><rect x="553.6" y="899.0" width="525.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="556.6" y="910.0">java/io/PrintStream.write</text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (4 samples, 0.03%)</title><rect x="555.5" y="883.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="558.5" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.04%)</title><rect x="556.0" y="883.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="559.0" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (193 samples, 1.27%)</title><rect x="556.5" y="883.0" width="14.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="559.5" y="894.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (14 samples, 0.09%)</title><rect x="557.5" y="867.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="560.5" y="878.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (14 samples, 0.09%)</title><rect x="558.6" y="867.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="561.6" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (51 samples, 0.33%)</title><rect x="559.7" y="867.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="562.7" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (37 samples, 0.24%)</title><rect x="563.7" y="867.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="566.7" y="878.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (20 samples, 0.13%)</title><rect x="564.7" y="851.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="567.7" y="862.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (4 samples, 0.03%)</title><rect x="565.9" y="835.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="568.9" y="846.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (4 samples, 0.03%)</title><rect x="566.2" y="851.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="569.2" y="862.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (28 samples, 0.18%)</title><rect x="566.7" y="867.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="569.7" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (12 samples, 0.08%)</title><rect x="567.9" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="570.9" y="862.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (30 samples, 0.20%)</title><rect x="568.8" y="867.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="571.8" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans(JavaThreadState, JavaThreadState) (28 samples, 0.18%)</title><rect x="569.0" y="851.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="572.0" y="862.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.flushBuffer (239 samples, 1.57%)</title><rect x="571.6" y="883.0" width="18.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="574.6" y="894.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (159 samples, 1.04%)</title><rect x="577.8" y="867.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="580.8" y="878.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (147 samples, 0.96%)</title><rect x="578.8" y="851.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="581.8" y="862.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (102 samples, 0.67%)</title><rect x="582.2" y="835.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="585.2" y="846.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (8 samples, 0.05%)</title><rect x="582.6" y="819.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="585.6" y="830.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (89 samples, 0.58%)</title><rect x="583.2" y="819.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="586.2" y="830.0"></text>
</g>
<g>
<title>java/nio/charset/CoderResult.isOverflow (15 samples, 0.10%)</title><rect x="583.7" y="803.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="586.7" y="814.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (4 samples, 0.03%)</title><rect x="584.6" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="587.6" y="798.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeLoop (68 samples, 0.45%)</title><rect x="584.9" y="803.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="587.9" y="814.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encodeArrayLoop (59 samples, 0.39%)</title><rect x="585.6" y="787.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.6" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.array (7 samples, 0.05%)</title><rect x="588.5" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="591.5" y="782.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.access$200 (11 samples, 0.07%)</title><rect x="589.3" y="771.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="592.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.updatePositions (11 samples, 0.07%)</title><rect x="589.3" y="755.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="592.3" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (10 samples, 0.07%)</title><rect x="589.4" y="739.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="592.4" y="750.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (6,050 samples, 39.69%)</title><rect x="590.1" y="883.0" width="468.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.1" y="894.0">java/io/OutputStreamWriter.flushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (6,040 samples, 39.62%)</title><rect x="590.9" y="867.0" width="467.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="593.9" y="878.0">sun/nio/cs/StreamEncoder.flushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (5,985 samples, 39.26%)</title><rect x="594.9" y="851.0" width="463.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="597.9" y="862.0">sun/nio/cs/StreamEncoder.implFlushBuffer</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (5,980 samples, 39.23%)</title><rect x="595.3" y="835.0" width="462.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="598.3" y="846.0">sun/nio/cs/StreamEncoder.writeBytes</text>
</g>
<g>
<title>java/io/PrintStream.write (5,927 samples, 38.88%)</title><rect x="596.1" y="819.0" width="458.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="599.1" y="830.0">java/io/PrintStream.write</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.03%)</title><rect x="599.0" y="803.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="602.0" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (178 samples, 1.17%)</title><rect x="599.3" y="803.0" width="13.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="602.3" y="814.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (6 samples, 0.04%)</title><rect x="600.1" y="787.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="603.1" y="798.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (10 samples, 0.07%)</title><rect x="600.7" y="787.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.7" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (31 samples, 0.20%)</title><rect x="601.4" y="787.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="604.4" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (30 samples, 0.20%)</title><rect x="603.8" y="787.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="606.8" y="798.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (14 samples, 0.09%)</title><rect x="604.9" y="771.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="607.9" y="782.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (9 samples, 0.06%)</title><rect x="605.3" y="755.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="608.3" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (23 samples, 0.15%)</title><rect x="606.2" y="787.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="609.2" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (9 samples, 0.06%)</title><rect x="607.3" y="771.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="610.3" y="782.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (65 samples, 0.43%)</title><rect x="608.0" y="787.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="611.0" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans(JavaThreadState, JavaThreadState) (45 samples, 0.30%)</title><rect x="609.6" y="771.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="612.6" y="782.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (5,560 samples, 36.47%)</title><rect x="613.3" y="803.0" width="430.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="616.3" y="814.0">java/io/BufferedOutputStream.flush</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (5,498 samples, 36.06%)</title><rect x="618.1" y="787.0" width="425.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="621.1" y="798.0">java/io/BufferedOutputStream.flushBuffer</text>
</g>
<g>
<title>java/io/FileOutputStream.write (5,479 samples, 35.94%)</title><rect x="619.2" y="771.0" width="424.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.2" y="782.0">java/io/FileOutputStream.write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (5,477 samples, 35.93%)</title><rect x="619.3" y="755.0" width="423.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="622.3" y="766.0">java/io/FileOutputStream.writeBytes</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (5,311 samples, 34.84%)</title><rect x="632.0" y="739.0" width="411.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="635.0" y="750.0">Java_java_io_FileOutputStream_writeBytes</text>
</g>
<g>
<title>jni_GetArrayLength (8 samples, 0.05%)</title><rect x="634.7" y="723.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="637.7" y="734.0"></text>
</g>
<g>
<title>jni_GetObjectField (7 samples, 0.05%)</title><rect x="635.5" y="723.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="638.5" y="734.0"></text>
</g>
<g>
<title>writeBytes (5,259 samples, 34.50%)</title><rect x="636.0" y="723.0" width="407.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="639.0" y="734.0">writeBytes</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (10 samples, 0.07%)</title><rect x="643.8" y="707.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="646.8" y="718.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (7 samples, 0.05%)</title><rect x="644.5" y="707.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="647.5" y="718.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (4 samples, 0.03%)</title><rect x="645.1" y="707.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="648.1" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.03%)</title><rect x="645.6" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="648.6" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.04%)</title><rect x="645.9" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="648.9" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (14 samples, 0.09%)</title><rect x="646.4" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="649.4" y="718.0"></text>
</g>
<g>
<title>handleWrite (84 samples, 0.55%)</title><rect x="648.0" y="707.0" width="6.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="651.0" y="718.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (147 samples, 0.96%)</title><rect x="654.5" y="707.0" width="11.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="657.5" y="718.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (10 samples, 0.07%)</title><rect x="655.5" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="658.5" y="702.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (8 samples, 0.05%)</title><rect x="656.5" y="691.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="659.5" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (50 samples, 0.33%)</title><rect x="657.1" y="691.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="660.1" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (64 samples, 0.42%)</title><rect x="661.0" y="691.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="664.0" y="702.0"></text>
</g>
<g>
<title>jni_GetArrayLength (152 samples, 1.00%)</title><rect x="665.9" y="707.0" width="11.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="668.9" y="718.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.03%)</title><rect x="667.9" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="670.9" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (57 samples, 0.37%)</title><rect x="668.2" y="691.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="671.2" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (65 samples, 0.43%)</title><rect x="672.6" y="691.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="675.6" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (185 samples, 1.21%)</title><rect x="677.7" y="707.0" width="14.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="680.7" y="718.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (13 samples, 0.09%)</title><rect x="681.0" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="684.0" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (58 samples, 0.38%)</title><rect x="682.2" y="691.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="685.2" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (61 samples, 0.40%)</title><rect x="686.7" y="691.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="689.7" y="702.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (8 samples, 0.05%)</title><rect x="691.4" y="691.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="694.4" y="702.0"></text>
</g>
<g>
<title>jni_GetObjectField (347 samples, 2.28%)</title><rect x="692.0" y="707.0" width="26.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="695.0" y="718.0">j..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (23 samples, 0.15%)</title><rect x="697.4" y="691.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="700.4" y="702.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (24 samples, 0.16%)</title><rect x="699.2" y="691.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="702.2" y="702.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (12 samples, 0.08%)</title><rect x="701.0" y="691.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="704.0" y="702.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.03%)</title><rect x="701.6" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="704.6" y="686.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (10 samples, 0.07%)</title><rect x="702.0" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="705.0" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (94 samples, 0.62%)</title><rect x="702.8" y="691.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="705.8" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (114 samples, 0.75%)</title><rect x="710.0" y="691.0" width="8.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="713.0" y="702.0"></text>
</g>
<g>
<title>write (4,188 samples, 27.47%)</title><rect x="718.9" y="707.0" width="324.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="721.9" y="718.0">write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (5 samples, 0.03%)</title><rect x="1043.2" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1046.2" y="782.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (145 samples, 0.95%)</title><rect x="1043.6" y="803.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1046.6" y="814.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (4 samples, 0.03%)</title><rect x="1048.2" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1051.2" y="798.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (5 samples, 0.03%)</title><rect x="1048.7" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.7" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*) (42 samples, 0.28%)</title><rect x="1049.1" y="787.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.1" y="798.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (8 samples, 0.05%)</title><rect x="1049.6" y="771.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1052.6" y="782.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (4 samples, 0.03%)</title><rect x="1050.2" y="771.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.2" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (12 samples, 0.08%)</title><rect x="1050.5" y="771.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.5" y="782.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (8 samples, 0.05%)</title><rect x="1051.4" y="771.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.4" y="782.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (4 samples, 0.03%)</title><rect x="1051.8" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.8" y="766.0"></text>
</g>
<g>
<title>internal_catch_exc_subsystem (10 samples, 0.07%)</title><rect x="1052.3" y="787.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1055.3" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (20 samples, 0.13%)</title><rect x="1053.3" y="787.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1056.3" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.clear (40 samples, 0.26%)</title><rect x="1054.9" y="819.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1057.9" y="830.0"></text>
</g>
<g>
<title>java/io/Writer.write (178 samples, 1.17%)</title><rect x="1058.4" y="883.0" width="13.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1061.4" y="894.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.write (176 samples, 1.15%)</title><rect x="1058.4" y="867.0" width="13.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1061.4" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (44 samples, 0.29%)</title><rect x="1065.1" y="851.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1068.1" y="862.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (29 samples, 0.19%)</title><rect x="1066.3" y="835.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.3" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans(JavaThreadState, JavaThreadState) (12 samples, 0.08%)</title><rect x="1067.6" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.getChars (39 samples, 0.26%)</title><rect x="1069.0" y="851.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1072.0" y="862.0"></text>
</g>
<g>
<title>jshort_arraycopy (5 samples, 0.03%)</title><rect x="1069.9" y="835.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1072.9" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (23 samples, 0.15%)</title><rect x="1070.3" y="835.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1073.3" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (89 samples, 0.58%)</title><rect x="1072.2" y="883.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1075.2" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (89 samples, 0.58%)</title><rect x="1072.2" y="867.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1075.2" y="878.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (4 samples, 0.03%)</title><rect x="1074.1" y="851.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.1" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*) (56 samples, 0.37%)</title><rect x="1074.7" y="851.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.7" y="862.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (5 samples, 0.03%)</title><rect x="1076.1" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.1" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (20 samples, 0.13%)</title><rect x="1076.6" y="835.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.6" y="846.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (7 samples, 0.05%)</title><rect x="1078.2" y="835.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.2" y="846.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (5 samples, 0.03%)</title><rect x="1078.3" y="819.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.3" y="830.0"></text>
</g>
<g>
<title>internal_catch_exc_subsystem (5 samples, 0.03%)</title><rect x="1078.7" y="835.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1081.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (8 samples, 0.05%)</title><rect x="1079.1" y="899.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1082.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (171 samples, 1.12%)</title><rect x="1079.7" y="899.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1082.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (170 samples, 1.12%)</title><rect x="1079.8" y="883.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1082.8" y="894.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (81 samples, 0.53%)</title><rect x="1085.7" y="867.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1088.7" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (13 samples, 0.09%)</title><rect x="1091.9" y="867.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1094.9" y="878.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (7 samples, 0.05%)</title><rect x="1092.9" y="915.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1095.9" y="926.0"></text>
</g>
<g>
<title>internal_catch_exc_subsystem (1,167 samples, 7.65%)</title><rect x="1093.5" y="963.0" width="90.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1096.5" y="974.0">internal_c..</text>
</g>
<g>
<title>__os_ch_md_redzone_cookie (1,167 samples, 7.65%)</title><rect x="1093.5" y="947.0" width="90.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1096.5" y="958.0">__os_ch_md..</text>
</g>
<g>
<title>WallClock::threadEntry(void*) (986 samples, 6.47%)</title><rect x="1093.5" y="931.0" width="76.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.5" y="942.0">WallCloc..</text>
</g>
<g>
<title>WallClock::timerLoop() (985 samples, 6.46%)</title><rect x="1093.6" y="915.0" width="76.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.6" y="926.0">WallCloc..</text>
</g>
<g>
<title>MacThreadList::next() (70 samples, 0.46%)</title><rect x="1093.7" y="899.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.7" y="910.0"></text>
</g>
<g>
<title>task_threads (70 samples, 0.46%)</title><rect x="1093.7" y="883.0" width="5.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1096.7" y="894.0"></text>
</g>
<g>
<title>mach_msg_trap (69 samples, 0.45%)</title><rect x="1093.8" y="867.0" width="5.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1096.8" y="878.0"></text>
</g>
<g>
<title>MacThreadList::rewind() (230 samples, 1.51%)</title><rect x="1099.1" y="899.0" width="17.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.1" y="910.0"></text>
</g>
<g>
<title>_kernelrpc_mach_port_deallocate_trap (175 samples, 1.15%)</title><rect x="1099.4" y="883.0" width="13.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1102.4" y="894.0"></text>
</g>
<g>
<title>_kernelrpc_mach_vm_deallocate_trap (47 samples, 0.31%)</title><rect x="1113.0" y="883.0" width="3.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1116.0" y="894.0"></text>
</g>
<g>
<title>OS::sendSignalToThread(int, int) (11 samples, 0.07%)</title><rect x="1116.9" y="899.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.9" y="910.0"></text>
</g>
<g>
<title>OS::threadState(int) (608 samples, 3.99%)</title><rect x="1117.8" y="899.0" width="47.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.8" y="910.0">OS::..</text>
</g>
<g>
<title>thread_info (604 samples, 3.96%)</title><rect x="1118.1" y="883.0" width="46.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1121.1" y="894.0">thre..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (6 samples, 0.04%)</title><rect x="1118.3" y="867.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1121.3" y="878.0"></text>
</g>
<g>
<title>mach_msg (11 samples, 0.07%)</title><rect x="1118.8" y="867.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1121.8" y="878.0"></text>
</g>
<g>
<title>mach_msg_trap (584 samples, 3.83%)</title><rect x="1119.6" y="867.0" width="45.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1122.6" y="878.0">mach..</text>
</g>
<g>
<title>__semwait_signal (59 samples, 0.39%)</title><rect x="1165.0" y="899.0" width="4.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1168.0" y="910.0"></text>
</g>
<g>
<title>java_start(Thread*) (181 samples, 1.19%)</title><rect x="1169.8" y="931.0" width="14.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1172.8" y="942.0"></text>
</g>
<g>
<title>GCTaskThread::run() (92 samples, 0.60%)</title><rect x="1169.8" y="915.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.8" y="926.0"></text>
</g>
<g>
<title>GCTaskManager::get_task(unsigned int) (22 samples, 0.14%)</title><rect x="1169.8" y="899.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.8" y="910.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (22 samples, 0.14%)</title><rect x="1169.8" y="883.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.8" y="894.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (22 samples, 0.14%)</title><rect x="1169.8" y="867.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="878.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (20 samples, 0.13%)</title><rect x="1169.8" y="851.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1172.8" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (20 samples, 0.13%)</title><rect x="1169.8" y="835.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.8" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.11%)</title><rect x="1170.0" y="819.0" width="1.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1173.0" y="830.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (61 samples, 0.40%)</title><rect x="1172.0" y="899.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.0" y="910.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (8 samples, 0.05%)</title><rect x="1172.0" y="883.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.0" y="894.0"></text>
</g>
<g>
<title>swtch_pri (7 samples, 0.05%)</title><rect x="1172.0" y="867.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1175.0" y="878.0"></text>
</g>
<g>
<title>SpinPause (53 samples, 0.35%)</title><rect x="1172.6" y="883.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1175.6" y="894.0"></text>
</g>
<g>
<title>JavaThread::run() (58 samples, 0.38%)</title><rect x="1176.9" y="915.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="926.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (58 samples, 0.38%)</title><rect x="1176.9" y="899.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="910.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (54 samples, 0.35%)</title><rect x="1176.9" y="883.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="894.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (45 samples, 0.30%)</title><rect x="1177.0" y="867.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="878.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (20 samples, 0.13%)</title><rect x="1177.0" y="851.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.0" y="862.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (20 samples, 0.13%)</title><rect x="1177.0" y="835.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.0" y="846.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (13 samples, 0.09%)</title><rect x="1177.1" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 0.06%)</title><rect x="1177.4" y="803.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (4 samples, 0.03%)</title><rect x="1178.1" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.1" y="830.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (23 samples, 0.15%)</title><rect x="1178.5" y="851.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.5" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (23 samples, 0.15%)</title><rect x="1178.5" y="835.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (23 samples, 0.15%)</title><rect x="1178.5" y="819.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (21 samples, 0.14%)</title><rect x="1178.5" y="803.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="814.0"></text>
</g>
<g>
<title>Compilation::build_hir() (8 samples, 0.05%)</title><rect x="1178.5" y="787.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="798.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (8 samples, 0.05%)</title><rect x="1178.5" y="771.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.5" y="782.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (8 samples, 0.05%)</title><rect x="1178.5" y="755.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.5" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (7 samples, 0.05%)</title><rect x="1178.6" y="739.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (7 samples, 0.05%)</title><rect x="1178.6" y="723.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (7 samples, 0.05%)</title><rect x="1178.6" y="707.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="718.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (9 samples, 0.06%)</title><rect x="1179.2" y="787.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.2" y="798.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (8 samples, 0.05%)</title><rect x="1179.3" y="771.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>CompileQueue::get() (8 samples, 0.05%)</title><rect x="1180.5" y="867.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.03%)</title><rect x="1180.5" y="851.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.03%)</title><rect x="1180.5" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.03%)</title><rect x="1180.5" y="819.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (4 samples, 0.03%)</title><rect x="1180.8" y="851.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.8" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (4 samples, 0.03%)</title><rect x="1180.8" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="846.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (4 samples, 0.03%)</title><rect x="1181.1" y="883.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="894.0"></text>
</g>
<g>
<title>VMThread::run() (16 samples, 0.10%)</title><rect x="1181.4" y="915.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.4" y="926.0"></text>
</g>
<g>
<title>VMThread::loop() (16 samples, 0.10%)</title><rect x="1181.4" y="899.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="910.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (4 samples, 0.03%)</title><rect x="1181.4" y="883.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="894.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (12 samples, 0.08%)</title><rect x="1181.7" y="883.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="894.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (12 samples, 0.08%)</title><rect x="1181.7" y="867.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="878.0"></text>
</g>
<g>
<title>VM_ParallelGCFailedAllocation::doit() (12 samples, 0.08%)</title><rect x="1181.7" y="851.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="862.0"></text>
</g>
<g>
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (12 samples, 0.08%)</title><rect x="1181.7" y="835.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="846.0"></text>
</g>
<g>
<title>PSScavenge::invoke() (12 samples, 0.08%)</title><rect x="1181.7" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="830.0"></text>
</g>
<g>
<title>PSScavenge::invoke_no_policy() (12 samples, 0.08%)</title><rect x="1181.7" y="803.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="814.0"></text>
</g>
<g>
<title>StringTable::unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int*, int*) (8 samples, 0.05%)</title><rect x="1182.0" y="787.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="798.0"></text>
</g>
<g>
<title>StringTable::buckets_unlink_or_oops_do(BoolObjectClosure*, OopClosure*, int, int, BasicHashtable&lt;(MemoryType)9&gt;::BucketUnlinkContext*) (8 samples, 0.05%)</title><rect x="1182.0" y="771.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.0" y="782.0"></text>
</g>
<g>
<title>WatcherThread::run() (15 samples, 0.10%)</title><rect x="1182.6" y="915.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="926.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (13 samples, 0.09%)</title><rect x="1182.8" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="910.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (12 samples, 0.08%)</title><rect x="1182.9" y="883.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="894.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (12 samples, 0.08%)</title><rect x="1182.9" y="867.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (12 samples, 0.08%)</title><rect x="1182.9" y="851.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.9" y="862.0"></text>
</g>
<g>
<title>__psynch_cvwait (10 samples, 0.07%)</title><rect x="1183.0" y="835.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1186.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (80 samples, 0.52%)</title><rect x="1183.8" y="963.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1186.8" y="974.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/FastThreadLocalRunnable.run (33 samples, 0.22%)</title><rect x="1183.8" y="947.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1186.8" y="958.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/ThreadExecutorMap$2.run (33 samples, 0.22%)</title><rect x="1183.8" y="931.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1186.8" y="942.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/SingleThreadEventExecutor$4.run (33 samples, 0.22%)</title><rect x="1183.8" y="915.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1186.8" y="926.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.run (33 samples, 0.22%)</title><rect x="1183.8" y="899.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1186.8" y="910.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKeys (31 samples, 0.20%)</title><rect x="1183.8" y="883.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1186.8" y="894.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (31 samples, 0.20%)</title><rect x="1183.8" y="867.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1186.8" y="878.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKey (31 samples, 0.20%)</title><rect x="1183.8" y="851.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1186.8" y="862.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (31 samples, 0.20%)</title><rect x="1183.8" y="835.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1186.8" y="846.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline.fireChannelRead (22 samples, 0.14%)</title><rect x="1183.8" y="819.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1186.8" y="830.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (22 samples, 0.14%)</title><rect x="1183.8" y="803.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1186.8" y="814.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (21 samples, 0.14%)</title><rect x="1183.8" y="787.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1186.8" y="798.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (21 samples, 0.14%)</title><rect x="1183.8" y="771.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1186.8" y="782.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (21 samples, 0.14%)</title><rect x="1183.8" y="755.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1186.8" y="766.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (21 samples, 0.14%)</title><rect x="1183.8" y="739.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1186.8" y="750.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (21 samples, 0.14%)</title><rect x="1183.8" y="723.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1186.8" y="734.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/TelnetChannelHandler.channelRead (21 samples, 0.14%)</title><rect x="1183.8" y="707.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.receive (19 samples, 0.12%)</title><rect x="1184.0" y="691.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.0" y="702.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushDataIfNecessary (19 samples, 0.12%)</title><rect x="1184.0" y="675.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.0" y="686.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushData (19 samples, 0.12%)</title><rect x="1184.0" y="659.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1187.0" y="670.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection.onData (18 samples, 0.12%)</title><rect x="1184.0" y="643.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1187.0" y="654.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (18 samples, 0.12%)</title><rect x="1184.0" y="627.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.0" y="638.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (18 samples, 0.12%)</title><rect x="1184.0" y="611.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1187.0" y="622.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (18 samples, 0.12%)</title><rect x="1184.0" y="595.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1187.0" y="606.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (18 samples, 0.12%)</title><rect x="1184.0" y="579.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (18 samples, 0.12%)</title><rect x="1184.0" y="563.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1187.0" y="574.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (18 samples, 0.12%)</title><rect x="1184.0" y="547.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1187.0" y="558.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (18 samples, 0.12%)</title><rect x="1184.0" y="531.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1187.0" y="542.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (18 samples, 0.12%)</title><rect x="1184.0" y="515.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1187.0" y="526.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.access$500 (18 samples, 0.12%)</title><rect x="1184.0" y="499.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1187.0" y="510.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.deliver (18 samples, 0.12%)</title><rect x="1184.0" y="483.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1187.0" y="494.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$200 (16 samples, 0.10%)</title><rect x="1184.1" y="467.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1187.1" y="478.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.handle (16 samples, 0.10%)</title><rect x="1184.1" y="451.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1187.1" y="462.0"></text>
</g>
<g>
<title>io/termd/core/readline/functions/Complete.apply (9 samples, 0.06%)</title><rect x="1184.7" y="435.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1187.7" y="446.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/CompletionHandler.accept (8 samples, 0.05%)</title><rect x="1184.7" y="419.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1187.7" y="430.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/CompletionHandler.accept (8 samples, 0.05%)</title><rect x="1184.7" y="403.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1187.7" y="414.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/CommandManagerCompletionHandler.handle (7 samples, 0.05%)</title><rect x="1184.7" y="387.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1187.7" y="398.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/handlers/shell/CommandManagerCompletionHandler.handle (7 samples, 0.05%)</title><rect x="1184.7" y="371.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1187.7" y="382.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/InternalCommandManager.complete (7 samples, 0.05%)</title><rect x="1184.7" y="355.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1187.7" y="366.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/InternalCommandManager.completeSingleCommand (5 samples, 0.03%)</title><rect x="1184.9" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1187.9" y="350.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.complete (5 samples, 0.03%)</title><rect x="1184.9" y="323.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1187.9" y="334.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.complete (5 samples, 0.03%)</title><rect x="1184.9" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1187.9" y="318.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/cli/CompletionUtils.complete (5 samples, 0.03%)</title><rect x="1184.9" y="291.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1187.9" y="302.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/CommandCompletion.complete (4 samples, 0.03%)</title><rect x="1184.9" y="275.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1187.9" y="286.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.complete (4 samples, 0.03%)</title><rect x="1184.9" y="259.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1187.9" y="270.0"></text>
</g>
<g>
<title>io/termd/core/readline/Completion.suggest (4 samples, 0.03%)</title><rect x="1184.9" y="243.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1187.9" y="254.0"></text>
</g>
<g>
<title>io/termd/core/readline/Completion.suggest (4 samples, 0.03%)</title><rect x="1184.9" y="227.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1187.9" y="238.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.redraw (4 samples, 0.03%)</title><rect x="1184.9" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1187.9" y="222.0"></text>
</g>
<g>
<title>io/termd/core/readline/LineBuffer.update (4 samples, 0.03%)</title><rect x="1184.9" y="195.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1187.9" y="206.0"></text>
</g>
<g>
<title>io/termd/core/readline/LineBuffer$Update.perform (4 samples, 0.03%)</title><rect x="1184.9" y="179.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1187.9" y="190.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (4 samples, 0.03%)</title><rect x="1184.9" y="163.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1187.9" y="174.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (4 samples, 0.03%)</title><rect x="1184.9" y="147.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1187.9" y="158.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.sendChunk (4 samples, 0.03%)</title><rect x="1184.9" y="131.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1187.9" y="142.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (4 samples, 0.03%)</title><rect x="1184.9" y="115.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1187.9" y="126.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (4 samples, 0.03%)</title><rect x="1184.9" y="99.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1187.9" y="110.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection$2.accept (4 samples, 0.03%)</title><rect x="1184.9" y="83.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1187.9" y="94.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection$2.accept (4 samples, 0.03%)</title><rect x="1184.9" y="67.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1187.9" y="78.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.write (4 samples, 0.03%)</title><rect x="1184.9" y="51.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1187.9" y="62.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/NettyTelnetConnection.send (4 samples, 0.03%)</title><rect x="1184.9" y="35.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1187.9" y="46.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.allocate (4 samples, 0.03%)</title><rect x="1185.7" y="819.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1188.7" y="830.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractByteBufAllocator.ioBuffer (4 samples, 0.03%)</title><rect x="1185.7" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1188.7" y="814.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractByteBufAllocator.directBuffer (4 samples, 0.03%)</title><rect x="1185.7" y="787.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1188.7" y="798.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/buffer/AbstractByteBufAllocator.directBuffer (4 samples, 0.03%)</title><rect x="1185.7" y="771.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1188.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (47 samples, 0.31%)</title><rect x="1186.4" y="947.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1189.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (47 samples, 0.31%)</title><rect x="1186.4" y="931.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1189.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (41 samples, 0.27%)</title><rect x="1186.4" y="915.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1189.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201 (41 samples, 0.27%)</title><rect x="1186.4" y="899.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1189.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (41 samples, 0.27%)</title><rect x="1186.4" y="883.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1189.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (41 samples, 0.27%)</title><rect x="1186.4" y="867.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1189.4" y="878.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessTask.run (41 samples, 0.27%)</title><rect x="1186.4" y="851.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1189.4" y="862.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl$ProcessHandler.handle (41 samples, 0.27%)</title><rect x="1186.4" y="835.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1189.4" y="846.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl$ProcessHandler.handle (41 samples, 0.27%)</title><rect x="1186.4" y="819.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1189.4" y="830.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.access$100 (41 samples, 0.27%)</title><rect x="1186.4" y="803.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1189.4" y="814.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.process (41 samples, 0.27%)</title><rect x="1186.4" y="787.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1189.4" y="798.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.process (41 samples, 0.27%)</title><rect x="1186.4" y="771.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1189.4" y="782.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.processStop (34 samples, 0.22%)</title><rect x="1186.5" y="755.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1189.5" y="766.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.execute (34 samples, 0.22%)</title><rect x="1186.5" y="739.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1189.5" y="750.0"></text>
</g>
<g>
<title>one/profiler/AsyncProfiler.execute (34 samples, 0.22%)</title><rect x="1186.5" y="723.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1189.5" y="734.0"></text>
</g>
<g>
<title>one/profiler/AsyncProfiler.execute0 (34 samples, 0.22%)</title><rect x="1186.5" y="707.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1189.5" y="718.0"></text>
</g>
<g>
<title>Java_one_profiler_AsyncProfiler_execute0 (34 samples, 0.22%)</title><rect x="1186.5" y="691.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.5" y="702.0"></text>
</g>
<g>
<title>Profiler::dumpFlameGraph(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, Arguments&amp;, bool) (33 samples, 0.22%)</title><rect x="1186.5" y="675.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.5" y="686.0"></text>
</g>
<g>
<title>FrameName::name(ASGCT_CallFrame&amp;, bool) (32 samples, 0.21%)</title><rect x="1186.5" y="659.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.5" y="670.0"></text>
</g>
<g>
<title>FrameName::javaMethodName(_jmethodID*) (31 samples, 0.20%)</title><rect x="1186.5" y="643.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.5" y="654.0"></text>
</g>
<g>
<title>jvmti_GetMethodDeclaringClass (7 samples, 0.05%)</title><rect x="1186.5" y="627.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1189.5" y="638.0"></text>
</g>
<g>
<title>Method::checked_resolve_jmethod_id(_jmethodID*) (7 samples, 0.05%)</title><rect x="1186.5" y="611.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.5" y="622.0"></text>
</g>
<g>
<title>Method::is_method_id(_jmethodID*) (7 samples, 0.05%)</title><rect x="1186.5" y="595.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.5" y="606.0"></text>
</g>
<g>
<title>jvmti_GetMethodName (24 samples, 0.16%)</title><rect x="1187.1" y="627.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1190.1" y="638.0"></text>
</g>
<g>
<title>Method::checked_resolve_jmethod_id(_jmethodID*) (24 samples, 0.16%)</title><rect x="1187.1" y="611.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="622.0"></text>
</g>
<g>
<title>Method::is_method_id(_jmethodID*) (24 samples, 0.16%)</title><rect x="1187.1" y="595.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="606.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessImpl.end (5 samples, 0.03%)</title><rect x="1189.1" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1192.1" y="766.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessImpl.end (5 samples, 0.03%)</title><rect x="1189.1" y="739.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.1" y="750.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessImpl.end (5 samples, 0.03%)</title><rect x="1189.1" y="723.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1192.1" y="734.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl.access$2000 (5 samples, 0.03%)</title><rect x="1189.1" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1192.1" y="718.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl.terminate (5 samples, 0.03%)</title><rect x="1189.1" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1192.1" y="702.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl.updateStatus (5 samples, 0.03%)</title><rect x="1189.1" y="675.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1192.1" y="686.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/JobImpl$TerminatedHandler.handle (5 samples, 0.03%)</title><rect x="1189.1" y="659.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1192.1" y="670.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/JobImpl$TerminatedHandler.handle (5 samples, 0.03%)</title><rect x="1189.1" y="643.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1192.1" y="654.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/impl/ShellImpl$ShellJobHandler.onTerminated (5 samples, 0.03%)</title><rect x="1189.1" y="627.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1192.1" y="638.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/util/FileUtils.saveCommandHistory (5 samples, 0.03%)</title><rect x="1189.1" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1192.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 0.04%)</title><rect x="1189.5" y="915.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.5" y="926.0"></text>
</g>
</g>
</svg>
