<?xml version="1.0" encoding="UTF-8"?>
<!--logback 支持热部署: scan, 及其时间设置-->
<!--
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。
默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
  <!--    spring.output.ansi.enabled=detect-->




  <!--移出logback自身日志的输出.方式1: 使用下面的配置 -->
  <!--移出logback自身日志的输出.方式2: 有两个步骤
  a,<configuration debug="false">
  b,replace the <layout> element with an <encoder> element
  即: 使用layout标签, debug="false"不起作用-->
  <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>




  <!--  ======================= property start =======================-->

  <!--  设置变量： <property> 用来定义变量值的标签，<property> 有两个属性name和value；-->
  <!--  name: 变量的名称-->
  <!--  value: 的值时变量定义的值。-->
  <!--  通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。-->
  <property name="module_name" value="stcommon"/>
  <property name="output_dir" value="out"/>
  <!-- 定义日志存放目录 -->
  <!-- 相对路径:相对当前项目-->
  <!-- <property name="logPath" value="logs"/>-->
  <!-- 相对路径:相对当前项目-->
  <!-- <property name="logPath" value="./logs"/>-->
  <!-- 相对路径:相对当前模块module; -->
  <!-- 可以插入任何系统属性, 因此能通过jdk的路径来变相设置当前模块路径 -->
  <property name="logPath" value="${output_dir}/${module_name}/${jdk.module.path}"/>
  <!-- 最大保存时间 15天-->
  <property name="maxHistory" value="15"/>
  <property name="maxFileSize" value="50MB"/>
  <property name="totalSizeCap" value="500MB"/>

  <!--  日志输出的格式-->
  <!--  see: http://logback.qos.ch/manual/layouts.html-->
  <property name="PATTERN"
            value="%d{yyyy-MM-dd HH:mm:ss.SSS}-%r |-%highlight(%-5level) [%-15.15thread] [%cyan(%-38.38logger{38})] \\(%-20method:%-4line\\): %msg%ex{full}%n"/>

  <!--  ======================= property  end  =======================-->


  <!--  每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，-->
  <!--  用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。-->
  <contextName>${module_name}</contextName>

  <include resource="org/springframework/boot/logging/logback/defaults.xml"/>


  <!--输出到控制台 ConsoleAppender-->
  <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
    <!--                <withJansi>true</withJansi>-->

    <!--展示格式 layout-->
    <layout class="ch.qos.logback.classic.PatternLayout">
      <pattern>${PATTERN}</pattern>
      <!--            <pattern>${CONSOLE_LOG_PATTERN}</pattern>-->
    </layout>
    <!--过滤器，只有过滤到指定级别的日志信息才会输出，如果level为ERROR，那么控制台只会输出ERROR日志-->
    <!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
    <!--            <level>ERROR</level>-->
    <!--        </filter>-->
  </appender>

  <!--正常的日志文件，输出到文件中-->
  <appender name="fileDEBUGLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
    所以我们使用下面的策略，可以避免输出 Error 的日志-->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!--过滤 Error-->
      <level>Error</level>
      <!--匹配到就禁止-->
      <onMatch>DENY</onMatch>
      <!--没有匹配到就允许-->
      <onMismatch>ACCEPT</onMismatch>
    </filter>

    <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
    -->
    <File>${logPath}/log_demo.log</File>
    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
      <FileNamePattern>${logPath}/log_demo_%d{yyyy-MM-dd}.log</FileNamePattern>
      <!--只保留最近90天的日志-->
      <maxHistory>90</maxHistory>
      <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
      <!--<totalSizeCap>1GB</totalSizeCap>-->
    </rollingPolicy>
    <!--日志输出编码格式化-->
    <encoder>
      <charset>UTF-8</charset>
      <pattern>${PATTERN}</pattern>
    </encoder>
  </appender>

  <!--输出ERROR日志到指定的文件中-->
  <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>Error</level>
    </filter>
    <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
        的日志改名为今天的日期。即，<File> 的日志都是当天的。
    -->
    <File>${logPath}/error.log</File>
    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
      <FileNamePattern>${logPath}/error_%d{yyyy-MM-dd}.log</FileNamePattern>
      <!--只保留最近90天的日志-->
      <maxHistory>30</maxHistory>
      <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
      <!--<totalSizeCap>1GB</totalSizeCap>-->
    </rollingPolicy>
    <!--日志输出编码格式化-->

    <encoder>
      <charset>UTF-8</charset>
      <pattern>${PATTERN}</pattern>
    </encoder>
  </appender>


  <!--    定义指定package的日志级别-->
  <!-- <logger name="org.springframework" level="DEBUG"></logger>
   <logger name="org.mybatis" level="DEBUG"></logger>
   <logger name="java.sql.Connection" level="DEBUG"></logger>
   <logger name="java.sql.Statement" level="DEBUG"></logger>
   <logger name="java.sql.PreparedStatement" level="DEBUG"></logger>
   <logger name="io.lettuce.*" level="INFO"></logger>
   <logger name="io.netty.*" level="ERROR"></logger>
   <logger name="com.rabbitmq.*" level="DEBUG"></logger>
   <logger name="org.springframework.amqp.*" level="DEBUG"></logger>
   <logger name="org.springframework.scheduling.*" level="DEBUG"></logger>-->
  <!--定义com.xxx..xx..xx包下的日志信息不上传，直接输出到fileDEBUGLog和fileErrorLog这个两个appender中，日志级别为DEBUG-->
  <!--<logger name="com.xxx.xxx.xx" additivity="false" level="DEBUG">
      <appender-ref ref="fileDEBUGLog"/>
      <appender-ref ref="fileErrorLog"/>
  </logger-->>


  <!--    测试logback的传递性:additivity -->
  <!--
      <logger name="com" level="debug" additivity="true">
          <appender-ref ref="consoleLog"/>
      </logger>
      <logger name="com.st" level="debug" additivity="true">
          <appender-ref ref="consoleLog"/>
      </logger>
      <logger name="com.st.practice" level="debug" additivity="true">
          <appender-ref ref="consoleLog"/>
      </logger>
      <logger name="com.st.practice.logback" level="debug" additivity="true">
          <appender-ref ref="consoleLog"/>
      </logger>
      <logger name="com.st.practice.logback.LogbackDemo" level="debug" additivity="true">
          <appender-ref ref="consoleLog"/>
      </logger>
  -->

  <!-- 指定最基础的日志输出级别-->
  <!-- 日志将在控制台, error级别等输出-->


  <!--  减少logback本身输出-->
  <!--  17:40:54,304 |-INFO in ch.qos.logback.classic.LoggerContext[stcommon] - Found resource [logback.xml] at [file:/Users/songtao/personaldriveMac/Projects/tsprTools/stcommon/target/classes/logback.xml]-->
  <logger name="ch.qos.logback" level="error" >
    <appender-ref ref="consoleLog"/>
  </logger>

  <root level="info">
    <appender-ref ref="consoleLog"/>
    <appender-ref ref="fileDEBUGLog"/>
    <appender-ref ref="fileErrorLog"/>
  </root>

</configuration>